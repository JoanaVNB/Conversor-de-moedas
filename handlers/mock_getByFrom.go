// Code generated by MockGen. DO NOT EDIT.
// Source: getByFrom.go

// Package handlers is a generated GoMock package.
package handlers

import (
	domain "exchange/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGetByFromHandler is a mock of GetByFromHandler interface.
type MockGetByFromHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGetByFromHandlerMockRecorder
}

// MockGetByFromHandlerMockRecorder is the mock recorder for MockGetByFromHandler.
type MockGetByFromHandlerMockRecorder struct {
	mock *MockGetByFromHandler
}

// NewMockGetByFromHandler creates a new mock instance.
func NewMockGetByFromHandler(ctrl *gomock.Controller) *MockGetByFromHandler {
	mock := &MockGetByFromHandler{ctrl: ctrl}
	mock.recorder = &MockGetByFromHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetByFromHandler) EXPECT() *MockGetByFromHandlerMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetByFromHandler) Execute(arg0 string, arg1 []domain.Exchange) ([]domain.Exchange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].([]domain.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetByFromHandlerMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetByFromHandler)(nil).Execute), arg0, arg1)
}
